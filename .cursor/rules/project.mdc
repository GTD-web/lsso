---
alwaysApply: true
---

모듈의 단위는 Business(Application) > Context > Domain 으로 나뉘어진다.

Domain은 가장 작은 단위이며 Repository를 통해 데이터베이스와 직접 데이터를 주고 받고 Service를 통해 데이터를 활용한다.
Domain 모듈은 .module.ts / .repository.ts / .service.ts 파일로 구성되어 있다.
트랜젝션 관리를 제외한 쿼리옵션들은 Domain 서비스 내에서 목적에 맞는 함수로 구현한다.
여러개의 Domain 사이에 관계설정이 필요하면 중간테이블을 만들어 PK값을 넣어서 관리한다.
필요하다면 중간테이블에 추가 컬럼을 넣을 수 있다.
만들어진 중간테이블도 하나의 Domain 모듈이 된다.

Context는 중간단계이며 여러개의 Domain 모듈을 import해서 하나의 문맥을 만든다.
Context는 여러개의 Context가 상위 Context를 구성할 수 있다.
Context란 어떠한 기능을 만드는데 진행되는 흐름을 뜻한다.
예를들면, 아이디와 비밀번호로 로그인을 하면 JWT 토큰을 반환하는 로그인 기능의 흐름은 다음과 같다.

1. 아이디가 존재하는지 확인한다.
2. 비밀번호가 맞는지 검증한다.
3. 해당 아이디가 활성화 되어있는지 확인한다.
4. 유저정보로 JWT 토큰을 생성한다.
5. JWT 토큰을 반환한다.
   이때 위 단계 하나하나가 Context의 서비스 함수가 된다.
   위 컨텍스트에는 유저 도메인모듈과 토큰 도메인모듈이 주입되어 있을 수 있다.

Context의 서비스 함수는 함수명을 한글로 하여 읽기 쉽게 한다.

Business는 최종단계이며 클라이언트와 직접적으로 통신하는 단계이다.
Business는 여러개의 Context 모듈을 import 해서 클라이언트의 시나리오에 맞게 기능이 동작하도록 구현한다.
Business 모듈에 컨트롤러가 존재하며, 컨트롤러 구현 시 요청 dto와 응답 dto를 생성하여 반드시 적용한다.
컨트롤러 구현 시 반드시 Swagger 문서용 데코레이터를 사용하여 문서화를 한다.
컨트롤러의 응답은 최종적으로 정제된 데이터만 반환한다. (status, message 등 다른 값 금지, 최종데이터가 배열이면 배열 값만 반환)

모든 프롬프트에서 필요하다고 판단되면 Domain 혹은 Context 혹은 Business 모듈들을 새로 만들어서 진행한다.
